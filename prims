#include<stdio.h>
#include<stdlib.h>
#define infinity 999

struct listnode
{
    int v;
    int cost;
    struct listnode *next;
};

typedef struct listnode *list;

struct tableEntry
{
    list head;
    int known;
    int dist;
    int path;
};

typedef struct tableEntry Table[10];

Table T;
int adjacent[20];
int j = 0;
int cost = 0;
int Totalcost = 0;

void buildad(int v1, int v2, int c1)
{
    list temp = (list)malloc(sizeof(struct listnode));
    list temp1 = (list)malloc(sizeof(struct listnode));

    temp->v = v2;
    temp->cost = c1;
    temp->next = NULL;

    temp1->v = v1;
    temp1->cost = c1;
    temp1->next = NULL;

    temp->next = T[v1].head;
    T[v1].head = temp;
    temp1->next = T[v2].head;
    T[v2].head = temp1;
}

void calad(int s)
{
    list temp;
    j = 0;
    for (temp = T[s].head; temp != NULL; temp = temp->next)
    {
        adjacent[++j] = temp->v;
    }
}

void findcost(int s, int d)
{
    list temp;
    for (temp = T[s].head; temp != NULL; temp = temp->next)
    {
        if (temp->v == d)
        {
            cost = temp->cost;
            break;
        }
    }
}

void ReadGraph()
{
    int ed, v1, v2, c1, i;
    printf("\nEnter the number of edges: ");
    scanf("%d", &ed);

    for (i = 1; i <= ed; i++)
    {
        printf("\nEnter the vertices pair along with cost: ");
        scanf("%d %d %d", &v1, &v2, &c1);
        buildad(v1, v2, c1);
    }
}

void initTable(int s, int NV)
{
    int i;
    for (i = 1; i <= NV; i++)
    {
        T[i].head = NULL;
        T[i].known = 0;
        T[i].dist = infinity;
        T[i].path = 0;
    }
    T[s].dist = 0;
    ReadGraph();
}

void printTable(int N)
{
    int i;
    list temp;

    printf("\n**FINAL TABLE**\n");
    printf("-----------------\n");
    printf("Vertex\tKnown\tDv\tPv\n");
    printf("-----------------\n");

    for (i = 1; i <= N; i++)
    {
        printf("%d\t%d\t%d\t%d\n", i, T[i].known, T[i].dist, T[i].path);
    }
}

void prims(int N)
{
    int v, w, i, c = 0, min = infinity;

    while (c != N)
    {
        for (i = 1; i <= N; i++)
        {
            if (T[i].known == 0)
            {
                if (min > T[i].dist)
                {
                    min = T[i].dist;
                    v = i;
                }
            }
        }

        T[v].known = 1;
        Totalcost += T[v].dist;
        ++c;

        calad(v);
        for (i = 1; i <= j; i++)
{
w = adjacent[i];
findcost(v, w);
if (T[w].known == 0 && cost < T[w].dist)
{
T[w].dist = cost;
T[w].path = v;
}
}
min = infinity;
}
}

int main()
{
int NV, s;
printf("Enter the number of vertices: ");
scanf("%d", &NV);
printf("\nEnter the source vertex: ");
scanf("%d", &s);
initTable(s, NV);
prims(NV);
printTable(NV);
printf("\nMinimum cost of spanning tree is %d\n", Totalcost);
return 0;
}
